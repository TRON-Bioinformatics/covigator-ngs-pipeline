/*
 * -------------------------------------------------
 *  TRON-Bioinformatics/covigator-ngs-pipeline Nextflow config file
 * -------------------------------------------------
 */

params.tronflow_bwa_version = "v1.4.0"
params.tronflow_bam_preprocessing_version = "v1.5.0"
params.tronflow_variant_normalization_version = "v1.1.0"

params.reference = "$baseDir/reference/Sars_cov_2.ASM985889v3.dna.toplevel.fa"
params.gff = "$baseDir/reference/Sars_cov_2.ASM985889v3.101.gff3"
params.snpeff_data = "$baseDir/reference/snpeff/"
params.snpeff_config = "$baseDir/reference/snpeff/snpEff.config"
params.problematic_sites = "$baseDir/reference/problematic_sites_sarsCov2.vcf.gz"

profiles {
  conda { process.conda = "$baseDir/environment.yml" }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  test {
    params.input_files = "$baseDir/test_data/input_data.txt"
    params.cpus = 1
    params.memory = "2g"
    timeline.enabled = false
    report.enabled = false
    trace.enabled = false
    dag.enabled = false
  }
}

// Export this variable to prevent local Python libraries from conflicting with those in the container
env {
  PYTHONNOUSERSITE = 1
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

VERSION = '0.3.0'

manifest {
  name = 'TRON-Bioinformatics/covigator-ngs-pipeline'
  author = 'Pablo Riesgo-Ferreiro, Patrick Sorn, Thomas Bukur'
  homePage = 'https://github.com/TRON-Bioinformatics/covigator-ngs-pipeline'
  description = 'A Nextflow pipeline to process NGS data from SARS-CoV-2'
  mainScript = 'main.nf'
  nextflowVersion = '>=19.10.0'
  version = VERSION
}

cleanup = true
conda.createTimeout = '1 h'

params.help_message = """
Covigator NGS pipeline v${VERSION}

Usage:
    nextflow run tron-bioinformatics/covigator-ngs-pipeline -profile conda --help

Input:
    * --fastq1: the first input FASTQ file
    * --name: the sample name, output files will be named after this name
    * --reference: the reference genome FASTA file, *.fai, *.dict and bwa indexes are required.
    * --gff: the GFFv3 gene annotations file
    * --output: the folder where to publish output

Optional input:
    * --fastq2: the second input FASTQ file
    * --min_base_quality: minimum base call quality to take a base into account (default: 20)
    * --min_mapping_quality: minimum mapping quality to take a read into account (default: 20)
    * --low_frequency_variant_threshold: VAF threshold to mark a variant as low frequency (default: 0.2)
    * --subclonal_variant_threshold: VAF superior threshold to mark a variant as subclonal (default: 0.8)
    * --memory: the ammount of memory used by each job (default: 3g)
    * --cpus: the number of CPUs used by each job (default: 1)

Output:
    * Output a normalized, phased and annotated VCF file for each of BCFtools, GATK and LoFreq
    * Output a TSV file output from iVar
    """
