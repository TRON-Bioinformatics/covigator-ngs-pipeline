import os
import sys
import re

def list_primersets(path):
    ignore = ("5p_cov",".txt",".bedGraph")
    filenames = os.listdir(path)
    filtered_filenames = [f for f in filenames if not any(j in f for j in ignore) and ".bed" in f]
    return filtered_filenames

def get_libsize(path):
    with open(path, 'r') as file:
        sum = 0
        for line in file:
            columns = line.split()
            if len(columns) >= 5:
                sum += float(columns[4])
    return sum

def get_score(path, T, G):
    A = 0
    S = 0
    with open(path, 'r') as file:
        for line in file:
            columns = line.split()
            if len(columns) >= 7:
                S += float(columns[2]) - float(columns[1])
                A += float(columns[6])
    S = S / G
    P = 1 - (A/T)
    score = A / (T * S * P)
    return score


# Run
G = 29903 # SARS CoV2 Genomelength

# Path where to find primerset coverages generated by bedtools (optimus_no_prime.sh)
path = sys.argv[1]

sampleId = sys.argv[2]

total_cov_file = [f for f in os.listdir(path) if "5p_cov" in f and "Graph" not in f]
primersets = list_primersets(path)

max = 0.0
likely_primerset = primersets[0]
for set in primersets:
    libsize = get_libsize(path + total_cov_file[0])
    score = get_score(path + set, libsize, G)
    if score >= max:
        likely_primerset = set
        max = score

# Remove sampleId from primer-set name
likely_primerset = re.sub(sampleId + "_","",likely_primerset,1)

# If score is too low, it could either mean the used primer-set is not in the library or primers have already been trimmed.
# In this case return NA and primer clipping will be skipped.
if max < 5:
    likely_primerset = "NA"

sys.stdout.write(likely_primerset)
sys.stdout.flush()
sys.exit(0)
