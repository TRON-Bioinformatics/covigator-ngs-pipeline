/*
 * -------------------------------------------------
 *  TRON-Bioinformatics/covigator-ngs-pipeline Nextflow config file
 * -------------------------------------------------
 */

// default SARS-CoV-2 references
params.sarscov2_reference = "$baseDir/reference/Sars_cov_2.ASM985889v3.dna.toplevel.fa"
params.sarscov2_gff = "$baseDir/reference/Sars_cov_2.ASM985889v3.101.gff3"
params.sarscov2_snpeff_data = "$baseDir/reference/snpeff/"
params.sarscov2_snpeff_config = "$baseDir/reference/snpeff/snpEff.config"
params.sarscov2_snpeff_organism = "Sars_cov_2.ASM985889v3.101"

// problematic sites
params.problematic_sites = "$baseDir/reference/problematic_sites_sarsCov2.vcf.gz"

// conservation annotations
params.conservation_sarscov2 = "$baseDir/reference/wuhCor1.mutDepletionConsHMM.bed.gz"
params.conservation_sarscov2_header = "$baseDir/reference/wuhCor1.mutDepletionConsHMM.header.txt"
params.conservation_sarbecovirus = "$baseDir/reference/wuhCor1.mutDepletionSarbecovirusConsHMM.bed.gz"
params.conservation_sarbecovirus_header = "$baseDir/reference/wuhCor1.mutDepletionSarbecovirusConsHMM.header.txt"
params.conservation_vertebrate = "$baseDir/reference/wuhCor1.mutDepletionVertebrateCoVConsHMM.bed.gz"
params.conservation_vertebrate_header = "$baseDir/reference/wuhCor1.mutDepletionVertebrateCoVConsHMM.header.txt"

// pfam domain annotations
params.pfam_names = "$baseDir/reference/pfam_names.bed.gz"
params.pfam_descriptions = "$baseDir/reference/pfam_descriptions.bed.gz"
params.pfam_names_header = "$baseDir/reference/pfam_names.header.txt"
params.pfam_descriptions_header = "$baseDir/reference/pfam_descriptions.header.txt"

profiles {
  conda { params.enable_conda = true }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  test {
    params.cpus = 1
    params.memory = "3g"
    timeline.enabled = false
    report.enabled = false
    trace.enabled = false
    dag.enabled = false
  }
}

// Export this variable to prevent local Python libraries from conflicting with those in the container
env {
  PYTHONNOUSERSITE = 1
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

cleanup = true
conda.createTimeout = '1 h'

VERSION = '0.8.0'

manifest {
  name = 'TRON-Bioinformatics/covigator-ngs-pipeline'
  author = 'Pablo Riesgo-Ferreiro, Patrick Sorn, Thomas Bukur'
  homePage = 'https://github.com/TRON-Bioinformatics/covigator-ngs-pipeline'
  description = 'A Nextflow pipeline to process NGS data from SARS-CoV-2'
  mainScript = 'main.nf'
  nextflowVersion = '>=19.10.0'
  version = VERSION
}

params.help_message = """
Covigator NGS pipeline v${VERSION}

Usage:
    nextflow run tron-bioinformatics/covigator-ngs-pipeline -profile conda --help

Input:
    * --fastq1: the first input FASTQ file (not compatible with --fasta)
    * --fasta: the FASTA file containing the assembly sequence (not compatible with --fastq1)
    * --name: the sample name, output files will be named after this name
    * --reference: the reference genome FASTA file, *.fai, *.dict and bwa indexes are required (absolute path!).
    * --output: the folder where to publish output

Optional input:
    * --fastq2: the second input FASTQ file
    * --gff: the GFFv3 gene annotations file. Only required to run iVar, if not provided iVar will not run
    * --min_base_quality: minimum base call quality to take a base into account (default: 20)
    * --min_mapping_quality: minimum mapping quality to take a read into account (default: 20)
    * --low_frequency_variant_threshold: VAF threshold to mark a variant as low frequency (default: 0.2)
    * --subclonal_variant_threshold: VAF superior threshold to mark a variant as subclonal (default: 0.8)
    * --memory: the ammount of memory used by each job (default: 3g)
    * --cpus: the number of CPUs used by each job (default: 1)
    * --initialize: initialize the conda environment
    * --skip_lofreq: skips calling variants with LoFreq
    * --skip_gatk: skips calling variants with GATK
    * --skip_bcftools: skips calling variants with BCFTools
    * --skip_ivar: skips calling variants with iVar
    * --match_score: global alignment match score, only applicable for assemblies (default: 2)
    * --mismatch_score: global alignment mismatch score, only applicable for assemblies (default: -1)
    * --open_gap_score: global alignment open gap score, only applicable for assemblies (default: -3)
    * --extend_gap_score: global alignment extend gap score, only applicable for assemblies (default: -0.1)
    * --skip_sarscov2_annotations: skip some of the SARS-CoV-2 specific annotations (default: false)
    * --snpeff_data: path to the SnpEff data folder, it will be useful to use the pipeline on other virus than SARS-CoV-2
    * --snpeff_config: path to the SnpEff config file, it will be useful to use the pipeline on other virus than SARS-CoV-2
    * --snpeff_organism: organism to annotate with SnpEff, it will be useful to use the pipeline on other virus than SARS-CoV-2

Output:
    * Output a normalized, phased and annotated VCF file for each of BCFtools, GATK and LoFreq when FASTQ files are
    provided or a single VCF obtained from a global alignment when a FASTA file is provided
    * Output a TSV file output from iVar
    """
